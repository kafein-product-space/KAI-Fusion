version: "3"
services:
  kaifusion-be:
    build: .
    image: kaifusion:latest
    container_name: kai-fusion-backend
    ports:
      - "${BACKEND_PORT:-23056}:8000"
    environment:
      # Core Application Settings
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      BACKEND_PORT: ${BACKEND_PORT:-23056}
      BACKEND_DEBUG: ${BACKEND_DEBUG:-true}

      # Database Settings
      CREATE_DATABASE: ${CREATE_DATABASE}
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_SSL: ${DATABASE_SSL}
      DISABLE_DATABASE: ${DISABLE_DATABASE}

      # Security
      CREDENTIAL_MASTER_KEY: ${CREDENTIAL_MASTER_KEY}

      # Basic Settings
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}

      # LangSmith Settings
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2}
      LANGCHAIN_ENDPOINT: ${LANGCHAIN_ENDPOINT}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT}

    command: uvicorn main:app --host 0.0.0.0 --port 8000
    networks:
      - kai_network
    stdin_open: true
    restart: always
    tty: true

  kaifusion-fe:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
        VITE_API_VERSION: ${VITE_API_VERSION}
        VITE_NODE_ENV: ${VITE_NODE_ENV}
        VITE_ENABLE_LOGGING: ${VITE_ENABLE_LOGGING}
    container_name: kai-fusion-frontend
    ports:
      - "23058:3000"
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      VITE_API_VERSION: ${VITE_API_VERSION}
      VITE_NODE_ENV: ${VITE_NODE_ENV}
      VITE_ENABLE_LOGGING: ${VITE_ENABLE_LOGGING}
    networks:
      - kai_network
    restart: unless-stopped
    depends_on:
      - kaifusion-be

  kai-widget:
    build:
      context: ./widget
      dockerfile: Dockerfile
    ports:
      - "23059:80"
    container_name: kai-fusion-widget
    networks:
      - kai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  kai_network:
    driver: bridge
