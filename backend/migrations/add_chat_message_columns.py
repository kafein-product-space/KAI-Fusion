#!/usr/bin/env python3
"""
Chat Message Table Column Migration Script
=========================================

This script adds the missing user_id and workflow_id columns to the chat_message table.
These columns are defined in the ChatMessage model but missing from the actual database table.

Missing Columns:
- user_id (UUID, NOT NULL, Foreign Key to users.id)
- workflow_id (UUID, NULLABLE, Foreign Key to workflows.id)

Usage:
    python add_chat_message_columns.py [--dry-run] [--force]

Parameters:
    --dry-run: Show what would be done without making changes
    --force: Apply changes even if columns already exist
"""

import asyncio
import sys
import os
import argparse
import logging
from typing import List, Dict, Any
from sqlalchemy import text, inspect
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

load_dotenv()

# Backend dizinini Python path'ine ekle
backend_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, backend_dir)

# Logging konfig√ºrasyonu
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('chat_message_migration.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# Environment variables
DATABASE_URL = os.getenv("DATABASE_URL")
ASYNC_DATABASE_URL = os.getenv("ASYNC_DATABASE_URL")

class ChatMessageColumnMigration:
    """Chat message tablo s√ºtun migrasyonu."""
    
    def __init__(self):
        self.engine = None
        self.session_factory = None
        
    async def initialize(self):
        """Veritabanƒ± baƒülantƒ±sƒ±nƒ± ba≈ülatƒ±r."""            
        if not ASYNC_DATABASE_URL:
            logger.error("ASYNC_DATABASE_URL environment variable is not set")
            return False
            
        try:
            # Async engine olu≈ütur
            self.engine = create_async_engine(
                ASYNC_DATABASE_URL,
                echo=False,
                pool_pre_ping=True,
                pool_recycle=3600,
                connect_args={
                    "server_settings": {"application_name": "kai-fusion-chat-migration"},
                    "statement_cache_size": 1000,
                    "prepared_statement_cache_size": 100,
                    "command_timeout": 60,
                }
            )
            
            # Session factory olu≈ütur
            self.session_factory = sessionmaker(
                autocommit=False,
                autoflush=False,
                bind=self.engine,
                class_=AsyncSession,
                expire_on_commit=False
            )
            
            logger.info("‚úÖ Veritabanƒ± baƒülantƒ±sƒ± ba≈üarƒ±yla kuruldu")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Veritabanƒ± baƒülantƒ±sƒ± kurulamadƒ±: {e}")
            return False
    
    async def check_connection(self) -> bool:
        """Veritabanƒ± baƒülantƒ±sƒ±nƒ± test eder."""
        if not self.engine:
            logger.error("Engine hen√ºz ba≈ülatƒ±lmamƒ±≈ü")
            return False
            
        try:
            async with self.engine.begin() as conn:
                result = await conn.execute(text("SELECT 1 as test"))
                row = result.fetchone()
                if row and row[0] == 1:
                    logger.info("‚úÖ Veritabanƒ± baƒülantƒ±sƒ± ba≈üarƒ±lƒ±")
                    return True
                else:
                    logger.error("‚ùå Veritabanƒ± baƒülantƒ± testi ba≈üarƒ±sƒ±z")
                    return False
        except Exception as e:
            logger.error(f"‚ùå Veritabanƒ± baƒülantƒ± testi hatasƒ±: {e}")
            return False
    
    async def check_table_exists(self) -> bool:
        """Chat message tablosunun varlƒ±ƒüƒ±nƒ± kontrol eder."""
        try:
            async with self.engine.begin() as conn:
                result = await conn.execute(text("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'chat_message'
                    )
                """))
                
                exists = result.fetchone()[0]
                if exists:
                    logger.info("‚úÖ chat_message tablosu mevcut")
                else:
                    logger.error("‚ùå chat_message tablosu bulunamadƒ±")
                return exists
                
        except Exception as e:
            logger.error(f"‚ùå Tablo varlƒ±k kontrol√º hatasƒ±: {e}")
            return False
    
    async def check_columns_exist(self) -> Dict[str, bool]:
        """Eksik s√ºtunlarƒ± kontrol eder."""
        try:
            async with self.engine.begin() as conn:
                result = await conn.execute(text("""
                    SELECT column_name
                    FROM information_schema.columns 
                    WHERE table_schema = 'public' 
                    AND table_name = 'chat_message'
                    AND column_name IN ('user_id', 'workflow_id')
                """))
                
                existing_columns = [row[0] for row in result.fetchall()]
                
                column_status = {
                    'user_id': 'user_id' in existing_columns,
                    'workflow_id': 'workflow_id' in existing_columns
                }
                
                logger.info(f"üìã S√ºtun durumu: {column_status}")
                return column_status
                
        except Exception as e:
            logger.error(f"‚ùå S√ºtun kontrol hatasƒ±: {e}")
            return {'user_id': False, 'workflow_id': False}
    
    async def check_foreign_key_tables_exist(self) -> Dict[str, bool]:
        """Foreign key referans tablolarƒ±nƒ±n varlƒ±ƒüƒ±nƒ± kontrol eder."""
        try:
            async with self.engine.begin() as conn:
                result = await conn.execute(text("""
                    SELECT table_name
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name IN ('users', 'workflows')
                """))
                
                existing_tables = [row[0] for row in result.fetchall()]
                
                table_status = {
                    'users': 'users' in existing_tables,
                    'workflows': 'workflows' in existing_tables
                }
                
                logger.info(f"üìã Referans tablo durumu: {table_status}")
                return table_status
                
        except Exception as e:
            logger.error(f"‚ùå Referans tablo kontrol hatasƒ±: {e}")
            return {'users': False, 'workflows': False}
    
    async def get_chat_message_count(self) -> int:
        """Mevcut chat message kayƒ±t sayƒ±sƒ±nƒ± d√∂nd√ºr√ºr."""
        try:
            async with self.engine.begin() as conn:
                result = await conn.execute(text("SELECT COUNT(*) FROM chat_message"))
                count = result.fetchone()[0]
                logger.info(f"üìä Mevcut chat_message kayƒ±t sayƒ±sƒ±: {count}")
                return count
        except Exception as e:
            logger.error(f"‚ùå Kayƒ±t sayƒ±sƒ± alma hatasƒ±: {e}")
            return 0
    
    async def add_user_id_column(self, dry_run: bool = False) -> bool:
        """user_id s√ºtununu ekler."""
        try:
            # First, add the column as nullable
            add_column_sql = """
                ALTER TABLE chat_message 
                ADD COLUMN user_id UUID
            """
            
            # Add index
            add_index_sql = """
                CREATE INDEX idx_chat_message_user_id ON chat_message (user_id)
            """
            
            # Add foreign key constraint
            add_fk_sql = """
                ALTER TABLE chat_message 
                ADD CONSTRAINT fk_chat_message_user_id 
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            """
            
            # Make column NOT NULL after setting default values
            set_not_null_sql = """
                ALTER TABLE chat_message 
                ALTER COLUMN user_id SET NOT NULL
            """
            
            if dry_run:
                logger.info("üîç DRY RUN - user_id s√ºtunu i√ßin √ßalƒ±≈ütƒ±rƒ±lacak SQL komutlarƒ±:")
                logger.info(f"   1. {add_column_sql.strip()}")
                logger.info(f"   2. {add_index_sql.strip()}")
                logger.info(f"   3. {add_fk_sql.strip()}")
                logger.info(f"   4. {set_not_null_sql.strip()}")
                return True
            
            async with self.engine.begin() as conn:
                # Add column
                await conn.execute(text(add_column_sql))
                logger.info("‚úÖ user_id s√ºtunu eklendi")
                
                # NOTE: We need to populate this column with actual user IDs before making it NOT NULL
                # For now, we'll leave it nullable and log a warning
                logger.warning("‚ö†Ô∏è user_id s√ºtunu NULL deƒüerlerle eklendi")
                logger.warning("‚ö†Ô∏è Bu s√ºtunu NOT NULL yapmadan √∂nce mevcut kayƒ±tlarƒ± uygun user_id deƒüerleriyle g√ºncellemelisiniz")
                
                # Add index
                await conn.execute(text(add_index_sql))
                logger.info("‚úÖ user_id index'i eklendi")
                
                # Add foreign key (but column remains nullable for now)
                await conn.execute(text(add_fk_sql))
                logger.info("‚úÖ user_id foreign key constraint'i eklendi")
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå user_id s√ºtunu ekleme hatasƒ±: {e}")
            return False
    
    async def add_workflow_id_column(self, dry_run: bool = False) -> bool:
        """workflow_id s√ºtununu ekler."""
        try:
            # Add column (nullable)
            add_column_sql = """
                ALTER TABLE chat_message 
                ADD COLUMN workflow_id UUID
            """
            
            # Add index
            add_index_sql = """
                CREATE INDEX idx_chat_message_workflow_id ON chat_message (workflow_id)
            """
            
            # Add foreign key constraint
            add_fk_sql = """
                ALTER TABLE chat_message 
                ADD CONSTRAINT fk_chat_message_workflow_id 
                FOREIGN KEY (workflow_id) REFERENCES workflows(id) ON DELETE CASCADE
            """
            
            if dry_run:
                logger.info("üîç DRY RUN - workflow_id s√ºtunu i√ßin √ßalƒ±≈ütƒ±rƒ±lacak SQL komutlarƒ±:")
                logger.info(f"   1. {add_column_sql.strip()}")
                logger.info(f"   2. {add_index_sql.strip()}")
                logger.info(f"   3. {add_fk_sql.strip()}")
                return True
            
            async with self.engine.begin() as conn:
                # Add column
                await conn.execute(text(add_column_sql))
                logger.info("‚úÖ workflow_id s√ºtunu eklendi")
                
                # Add index
                await conn.execute(text(add_index_sql))
                logger.info("‚úÖ workflow_id index'i eklendi")
                
                # Add foreign key
                await conn.execute(text(add_fk_sql))
                logger.info("‚úÖ workflow_id foreign key constraint'i eklendi")
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå workflow_id s√ºtunu ekleme hatasƒ±: {e}")
            return False
    
    async def run_migration(self, dry_run: bool = False, force: bool = False):
        """Ana migrasyon fonksiyonu."""
        logger.info("üöÄ Chat Message S√ºtun Migrasyonu Ba≈ülatƒ±lƒ±yor...")
        
        # Ba≈ülatma
        if not await self.initialize():
            return False
        
        # Baƒülantƒ± testi
        if not await self.check_connection():
            return False
        
        # Tablo varlƒ±ƒüƒ±nƒ± kontrol et
        if not await self.check_table_exists():
            logger.error("‚ùå chat_message tablosu bulunamadƒ±. √ñnce veritabanƒ± kurulumunu √ßalƒ±≈ütƒ±rƒ±n.")
            return False
        
        # Referans tablolarƒ± kontrol et
        ref_tables = await self.check_foreign_key_tables_exist()
        if not ref_tables['users']:
            logger.error("‚ùå users tablosu bulunamadƒ±. Foreign key eklenemez.")
            return False
        if not ref_tables['workflows']:
            logger.error("‚ùå workflows tablosu bulunamadƒ±. Foreign key eklenemez.")
            return False
        
        # Mevcut kayƒ±t sayƒ±sƒ±nƒ± al
        record_count = await self.get_chat_message_count()
        
        # S√ºtun durumunu kontrol et
        column_status = await self.check_columns_exist()
        
        missing_columns = []
        if not column_status['user_id']:
            missing_columns.append('user_id')
        if not column_status['workflow_id']:
            missing_columns.append('workflow_id')
        
        if not missing_columns and not force:
            logger.info("‚úÖ T√ºm gerekli s√ºtunlar zaten mevcut")
            return True
        
        if force and not missing_columns:
            logger.warning("‚ö†Ô∏è FORCE modu: S√ºtunlar zaten mevcut ama tekrar ekleme denemesi yapƒ±lacak")
        
        logger.info("=" * 60)
        logger.info("üìä Mƒ∞GRASYON DURUM RAPORU")
        logger.info("=" * 60)
        logger.info(f"Mevcut kayƒ±t sayƒ±sƒ±: {record_count}")
        logger.info(f"Eksik s√ºtunlar: {missing_columns}")
        logger.info(f"DRY RUN modu: {'Aktif' if dry_run else 'Pasif'}")
        logger.info(f"FORCE modu: {'Aktif' if force else 'Pasif'}")
        logger.info("=" * 60)
        
        if record_count > 0:
            logger.warning("‚ö†Ô∏è Dƒ∞KKAT: Tabloda mevcut kayƒ±tlar var!")
            logger.warning("‚ö†Ô∏è user_id s√ºtunu NOT NULL olduƒüu i√ßin mevcut kayƒ±tlarƒ± g√ºncellemek gerekebilir")
        
        # Migrasyonu √ßalƒ±≈ütƒ±r
        success = True
        
        if 'user_id' in missing_columns or force:
            if not await self.add_user_id_column(dry_run=dry_run):
                success = False
        
        if 'workflow_id' in missing_columns or force:
            if not await self.add_workflow_id_column(dry_run=dry_run):
                success = False
        
        if success:
            if dry_run:
                logger.info("üîç DRY RUN tamamlandƒ± - deƒüi≈üiklik yapƒ±lmadƒ±")
            else:
                logger.info("‚úÖ Migrasyon ba≈üarƒ±yla tamamlandƒ±!")
                logger.warning("‚ö†Ô∏è √ñNEMLƒ∞: user_id s√ºtunu ≈üu an NULL deƒüerlerle eklendi")
                logger.warning("‚ö†Ô∏è Mevcut kayƒ±tlarƒ± uygun user_id deƒüerleriyle g√ºncelledikten sonra NOT NULL constraint'ini aktif etmelisiniz")
        else:
            logger.error("‚ùå Migrasyon ba≈üarƒ±sƒ±z!")
            
        return success

async def main():
    """Ana fonksiyon."""
    parser = argparse.ArgumentParser(description="Chat Message S√ºtun Migrasyonu")
    parser.add_argument("--dry-run", action="store_true", help="Deƒüi≈üiklikleri g√∂ster ama uygulama")
    parser.add_argument("--force", action="store_true", help="S√ºtunlar zaten varsa bile ekleme dene")
    
    args = parser.parse_args()
    
    # Environment kontrol√º
    if not ASYNC_DATABASE_URL:
        logger.error("‚ùå ASYNC_DATABASE_URL environment variable ayarlanmamƒ±≈ü")
        logger.info("üí° √á√∂z√ºm: export ASYNC_DATABASE_URL='your_database_url'")
        sys.exit(1)
    
    # Migration ba≈ülat
    migration = ChatMessageColumnMigration()
    
    try:
        success = await migration.run_migration(
            dry_run=args.dry_run,
            force=args.force
        )
        
        if success:
            logger.info("üéâ Chat message s√ºtun migrasyonu tamamlandƒ±!")
            sys.exit(0)
        else:
            logger.error("‚ùå Chat message s√ºtun migrasyonu ba≈üarƒ±sƒ±z!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Kullanƒ±cƒ± tarafƒ±ndan durduruldu")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Beklenmeyen hata: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())