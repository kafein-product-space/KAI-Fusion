name: Deploy KAI-Fusion

on:
  push:
    branches: [ test ]
  workflow_dispatch:

env:
  REMOTE_HOST: '34.141.195.202'
  REMOTE_USER: 'kafein'
  
  # Database Configuration
  DATABASE_URL: 'postgresql://postgres:flowisekafein1@3.68.112.56:5432/postgres.xjwosoxtrzysncbjrwlt'
  ASYNC_DATABASE_URL: 'postgresql+asyncpg://postgres:flowisekafein1@3.68.112.56:5432/postgres.xjwosoxtrzysncbjrwlt'
  POSTGRES_DB: 'postgres.xjwosoxtrzysncbjrwlt'
  POSTGRES_USER: 'postgres'
  POSTGRES_PASSWORD: 'flowisekafein1'
  DATABASE_PORT: '5432'
  DATABASE_HOST: '3.68.112.56'
  
  # Application Configuration
  SECRET_KEY: 'your-secret-key-here'
  CREDENTIAL_MASTER_KEY: 'your-credential-master-key'
  CREATE_DATABASE: 'none'
  DATABASE_SSL: 'false'
  DISABLE_DATABASE: 'false'
  
  # LangChain Configuration
  LANGCHAIN_TRACING_V2: 'true'
  LANGCHAIN_API_KEY: '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'
  LANGCHAIN_PROJECT: 'kai-fusion-workflows'
  LANGCHAIN_ENDPOINT: 'https://api.smith.langchain.com'
  
  # Frontend Configuration
  VITE_API_BASE_URL: 'http://3.68.112.56:8000'
  VITE_API_VERSION: '/api/v1'
  VITE_NODE_ENV: 'production'
  VITE_ENABLE_LOGGING: 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🌐 SSH Connection Test
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "✅ SSH connection successful!"
          echo "Server: $(hostname)"
          echo "User: $(whoami)"
          echo "Docker: $(docker --version 2>/dev/null || echo 'Docker not found')"
          echo "Docker Compose: $(docker compose version 2>/dev/null || echo 'Docker Compose not found')"

    - name: 🧹 Cleanup Previous Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Stop existing containers
          if [ -d "KAI-Fusion" ]; then
              cd KAI-Fusion
              sudo docker compose down -v --remove-orphans || true
              cd ..
          fi
          
          # Remove KAI-Fusion images
          IMAGES_TO_DELETE=$(sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(kaifusion|kai-fusion)" || true)
          if [ ! -z "$IMAGES_TO_DELETE" ]; then
              echo "$IMAGES_TO_DELETE" | xargs sudo docker rmi -f || true
          fi
          
          # Clean dangling images
          sudo docker image prune -f || true
          
          # Remove old project directory
          rm -rf KAI-Fusion || true
          
          echo "✅ Cleanup completed!"

    - name: 📥 Git Clone Repository
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Clone repository
          git clone -b test https://${{ secrets.GIT_USERNAME }}:${{ secrets.GIT_TOKEN }}@github.com/MetehanaydemirKafein/KAI-Fusion.git
          
          # Verify clone
          if [ ! -d "KAI-Fusion" ]; then
              echo "❌ Git clone failed!"
              exit 1
          fi
          
          cd KAI-Fusion
          echo "✅ Git clone successful!"
          echo "Last commit: $(git log --oneline -1)"
          echo "Branch: $(git branch --show-current)"
          
          # Check for docker-compose file
          if [ ! -f "docker-compose.yml" ] && [ ! -f "docker-compose.yaml" ]; then
              echo "❌ Docker compose file not found!"
              exit 1
          fi

    - name: 📝 Create Environment File
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd KAI-Fusion
          
          # Create .env file
          cat > .env << 'EOF'
          SECRET_KEY=${{ env.SECRET_KEY }}
          CREATE_DATABASE=${{ env.CREATE_DATABASE }}
          DATABASE_URL=${{ env.DATABASE_URL }}
          ASYNC_DATABASE_URL=${{ env.ASYNC_DATABASE_URL }}
          POSTGRES_DB=${{ env.POSTGRES_DB }}
          POSTGRES_USER=${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
          DATABASE_PORT=${{ env.DATABASE_PORT }}
          DATABASE_HOST=${{ env.DATABASE_HOST }}
          DATABASE_SSL=${{ env.DATABASE_SSL }}
          DISABLE_DATABASE=${{ env.DISABLE_DATABASE }}
          CREDENTIAL_MASTER_KEY=${{ env.CREDENTIAL_MASTER_KEY }}
          LANGCHAIN_TRACING_V2=${{ env.LANGCHAIN_TRACING_V2 }}
          LANGCHAIN_API_KEY=${{ env.LANGCHAIN_API_KEY }}
          LANGCHAIN_PROJECT=${{ env.LANGCHAIN_PROJECT }}
          LANGCHAIN_ENDPOINT=${{ env.LANGCHAIN_ENDPOINT }}
          VITE_API_BASE_URL=${{ env.VITE_API_BASE_URL }}
          VITE_API_VERSION=${{ env.VITE_API_VERSION }}
          VITE_NODE_ENV=${{ env.VITE_NODE_ENV }}
          VITE_ENABLE_LOGGING=${{ env.VITE_ENABLE_LOGGING }}
          EOF
          
          echo '✅ Environment file created!'
          echo 'Environment file contents:'
          cat .env

    - name: 🐳 Docker Build & Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd KAI-Fusion
          
          # Determine compose file
          COMPOSE_FILE="docker-compose.yml"
          if [ ! -f "$COMPOSE_FILE" ] && [ -f "docker-compose.yaml" ]; then
              COMPOSE_FILE="docker-compose.yaml"
          fi
          
          echo "Using compose file: $COMPOSE_FILE"
          
          # Verify .env file exists and has content
          if [ ! -f ".env" ]; then
              echo "❌ .env file not found!"
              exit 1
          fi
          
          echo "📋 Environment file verification:"
          wc -l .env
          
          # Build and start services
          echo "🔨 Building images..."
          sudo docker compose -f $COMPOSE_FILE build --no-cache --pull
          
          echo "🚀 Starting services..."
          sudo docker compose -f $COMPOSE_FILE up -d
          
          echo "✅ Docker deployment completed!"
          
          # Show container status
          echo "Container status:"
          sudo docker compose -f $COMPOSE_FILE ps

    - name: 🏥 Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd KAI-Fusion
          
          echo "⏳ Waiting for application to start..."
          sleep 45
          
          # Determine compose file
          COMPOSE_FILE="docker-compose.yml"
          if [ ! -f "$COMPOSE_FILE" ] && [ -f "docker-compose.yaml" ]; then
              COMPOSE_FILE="docker-compose.yaml"
          fi
          
          # Container status
          echo "📊 Container status:"
          sudo docker compose -f $COMPOSE_FILE ps
          
          # Port check
          echo "🔍 Port status:"
          netstat -tlnp | grep -E ":(8000|3000)" || echo "Ports not active yet"
          
          # HTTP check
          echo "🌐 HTTP health check:"
          for i in {1..5}; do
              if curl -f -s http://localhost:8000/health >/dev/null 2>&1; then
                  echo "✅ Backend health endpoint working"
                  break
              elif curl -f -s http://localhost:8000/ >/dev/null 2>&1; then
                  echo "✅ Backend root endpoint working"
                  break
              else
                  echo "⏳ Waiting for backend... ($i/5)"
                  sleep 10
              fi
          done
          
          echo "📝 Recent logs:"
          sudo docker compose -f $COMPOSE_FILE logs --tail=20

    - name: 🎉 Deployment Success Notification
      if: success()
      run: |
        echo "🎉 === DEPLOYMENT SUCCESSFUL! ==="
        echo ""
        echo "✅ KAI-Fusion deployed successfully!"
        echo ""
        echo "🌐 Access URLs:"
        echo "   • Backend:  http://3.68.112.56:8000"
        echo "   • Frontend: http://3.68.112.56:3000"
        echo ""
        echo "🚀 Deployment completed!"

    - name: ❌ Deployment Failure Analysis
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ env.REMOTE_HOST }}
        username: ${{ env.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd KAI-Fusion 2>/dev/null || exit 0
          echo "🚨 === ERROR ANALYSIS ==="
          
          # Show .env file content for debugging
          echo "Environment file content:"
          cat .env 2>/dev/null || echo ".env file not found"
          
          # Container status
          if [ -f "docker-compose.yml" ]; then
              sudo docker compose ps || true
              sudo docker compose logs --tail=50 || true
          elif [ -f "docker-compose.yaml" ]; then
              sudo docker compose -f docker-compose.yaml ps || true
              sudo docker compose -f docker-compose.yaml logs --tail=50 || true
          fi
